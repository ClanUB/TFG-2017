import operator
from sklearn import metrics
from RecMvRepl import RecMvRepl
#===============================================================================
# Convertir los valores de un dataframe al ranking ordinal de 1 a 10 en filas
# 
# df_qual(pd.DataFrame): dataframe a convertir
#===============================================================================
def score2ranking(df, copy=True, reverse=True):
    if copy:
        df_copy = df.copy()
    else:
        df_copy = df
        
    rank_list = list(range(1,11))
    for index in range(len(df_copy)):
        qual_i = df_copy.iloc[index]
        sorted_i = sorted(dict(qual_i).items(), key=operator.itemgetter(1), reverse=reverse)
        
        sorted_asig_names = [x[0] for x in sorted_i]
        
        for i in range(len(qual_i)):
            asig_name = sorted_asig_names[i]
            rank = rank_list[i]
            qual_i[asig_name] = rank
            
    df_copy[df_copy.columns] = df_copy[df_copy.columns].astype(int)
    return df_copy
    
    
def compute_accuracy(df1, df2):   
    df_diff = abs(df1 - df2)
    n = (df_diff==0).sum().sum()
    accuracy = n / float(df1.shape[0] * df1.shape[1])
    return accuracy


def compute_accMargin(y_pred, df2):
    df_diff = abs(y_pred - df2)
    n = (df_diff<=2).sum().sum()
    accuracy = n / float(y_pred.shape[0] * y_pred.shape[1])
    return accuracy
    

def compute_mae(y_pred, y_test):
    df_error = abs(y_pred-y_test)
    error = df_error.sum().sum() / float(df_error.shape[0] * df_error.shape[1])
    return error


def fill_mv(df):
    mv_positions = []
    for i in range(len(df)):
        row = df.iloc[i]
        num_mv = row.isnull().sum()
        if (num_mv>0):
            mv_positions.append(i)
    
    if (len(mv_positions)>0):
        mv_index = df.index[mv_positions]
        mv_rows = df.loc[mv_index]
        training_rows = df.drop(mv_index)
        
        rmr = RecMvRepl()
        rmr.fit(training_rows)
        rmr.predict(mv_rows) #mv_rows is being updated
        df.loc[mv_index] = mv_rows