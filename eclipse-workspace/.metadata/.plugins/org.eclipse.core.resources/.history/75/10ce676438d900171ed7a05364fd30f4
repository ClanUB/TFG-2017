from loadData import loadData
from randomForest import rf_qual_prediction, rf_rank_prediction
from binClassifier import bc_qual_prediction, bc_binary_prediction
from RecUserBased import RecUserBased
from RecMvRepl import RecMvRepl
import utilFunctions

import pandas as pd
import numpy as np
from time import time
from sklearn.model_selection import train_test_split, cross_val_score, KFold
from statistics import mean

n_splits = 10
test_size = 2
random_state = 0
#===============================================================================
# Lanza el menu que muestra opciones de computacion con el Random Forest
# X: DataFrame, data
# y: DataFrame, target
#===============================================================================
def RF_menuOptions(X, y):
    exit = False
    
    while(not exit):
        option = input("Selecciona una opcion:\n1. Ranking mediante prediccion de notas\n2. Prediccion de ranking\n\
3. Aprobado/suspenso mediante prediccion de notas\n4. Clasificacion binaria de aprobado/suspenso\n")
        
        if option=="1":
            rf_qual_prediction(X, y)
            
        elif option=="2":
            rf_rank_prediction(X, y)
            
        elif option=="3":
            bc_qual_prediction(X, y)
            
        elif option=="4":
            bc_binary_prediction(X, y)
            
        elif option=="5":
            exit = True
            
        else:
            print("opcion erronea.")
            
          
#===============================================================================
# Calculo de la puntuancion de cross validation
# clf: BaseEstimator, el clasificador
# X: DataFrame, data
# y: DataFrame, target
# kf: Kfold, iterador de cross validation
#===============================================================================
def cross_validation(clf, X, y, kf):
    yPair_list = []
    splits = kf.split(X)
    
    for i, index in enumerate(splits):
        print("Fold", i)
        
        train_index = index[0]
        test_index = index[1]
    
        clf.fit(X.iloc[train_index], y.iloc[train_index])
        
        X_test = X.iloc[test_index]
        y_pred = clf.predict(X_test)
        y_test = y.iloc[test_index]  
              
        yPair_list.append((y_pred, y_test))
    
    #Computing cv score
    list_errors = []
    for yp, yt in yPair_list:
        error = utilFunctions.compute_error(yp, yt)
        list_errors.append(error)
    
    print("the cross validation error is: ", mean(list_errors))

#===============================================================================
# Evaluacion de prediccion del clasificador, test unitario
# clf: BaseEstimator, el clasificador
# X: DataFrame, data
# y: DataFrame, target
#===============================================================================
def predict(clf, X, y):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=33)
    
    clf.fit(X_train, y_train, X_test)
    y_pred = clf.predict()
    
    df_error = abs(y_pred-y_test)
    error = df_error.sum().sum() / float(df_error.shape[0]*df_error.shape[1])
    print ("error=",error)
    
    return y_pred


#===============================================================================
# Funcion principal que prepara todos los datos necesarios, y llama a las demas funciones para ejecutar 
# diferentes funcionalidades implementadas.
#===============================================================================
def main():
    id_ens = "G1042"
    X, y = loadData(id_ens) #df_year1, df_year2
    
    #===========================================================================
    # #Elim case
    # df_concat = pd.concat([X, y], axis=1)
    # df_concat.dropna(axis=0, how="any", inplace=True)
    # X = np.round(df_concat.iloc[:, :10], decimals=2)
    # y = np.round(df_concat.iloc[:, 10:20], decimals=2)
    # 
    # rec = RecUserBased(filename="dict_knn_rub_elim.txt") #Recomendador basado en usuarios
    #===========================================================================
    
    
    #replacement case
    X = np.round(X, decimals=2)
    y = np.round(y, decimals=2)
 
    rmr_X = RecMvRepl(filename="dict_knn_X.txt")
    rmr_X.fill_mv(X)
    X = np.round(X, decimals=2)
     
    rmr_y = RecMvRepl(filename="dict_knn_y.txt")
    rmr_y.fill_mv(y)
    y = np.round(y, decimals=2)

    rec = RecUserBased(filename="dict_knn_rub_repl.txt") #Recomendador basado en usuarios

    
    #Ranking case
    X_copy = utilFunctions.score2ranking(X)
    y_copy = utilFunctions.score2ranking(y)
    
    predict(rec, X_copy, y_copy)
    #===========================================================================
    # cv_score = cross_val_score(rec, X_copy, y_copy, cv=5)
    # print(cv_score)
    #===========================================================================
     
    #===========================================================================
    # kf = KFold(n_splits=n_splits, random_state=0)
    # cross_validation(rec, X_copy, y_copy, kf)
    # print("final")
    #===========================================================================
    print("final")
    
main()